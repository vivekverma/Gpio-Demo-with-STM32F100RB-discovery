
test_vivek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000698  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000868  08000868  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800086c  0800086c  0001086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000004  08000874  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000028  08000874  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001d8c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000074d  00000000  00000000  00021db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002c0  00000000  00000000  00022508  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  000227c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f62  00000000  00000000  00022a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eb9  00000000  00000000  00023992  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002484b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000a64  00000000  00000000  000248cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000850 	.word	0x08000850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	08000850 	.word	0x08000850

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4313      	orrs	r3, r2
 8000252:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d044      	beq.n	80002e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	e038      	b.n	80002dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800026a:	2201      	movs	r2, #1
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4013      	ands	r3, r2
 800027e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d126      	bne.n	80002d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028e:	220f      	movs	r2, #15
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	43db      	mvns	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4013      	ands	r3, r2
 80002a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	2b28      	cmp	r3, #40	; 0x28
 80002b6:	d105      	bne.n	80002c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80002b8:	2201      	movs	r2, #1
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	409a      	lsls	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	e008      	b.n	80002d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	2b48      	cmp	r3, #72	; 0x48
 80002ca:	d104      	bne.n	80002d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002cc:	2201      	movs	r2, #1
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3301      	adds	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c3      	bls.n	800026a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d946      	bls.n	800037e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	e03a      	b.n	8000372 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3308      	adds	r3, #8
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d127      	bne.n	800036c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000322:	220f      	movs	r2, #15
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4013      	ands	r3, r2
 8000334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000336:	69fa      	ldr	r2, [r7, #28]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4313      	orrs	r3, r2
 8000342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	78db      	ldrb	r3, [r3, #3]
 8000348:	2b28      	cmp	r3, #40	; 0x28
 800034a:	d105      	bne.n	8000358 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3308      	adds	r3, #8
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	2b48      	cmp	r3, #72	; 0x48
 800035e:	d105      	bne.n	800036c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3308      	adds	r3, #8
 8000364:	2201      	movs	r2, #1
 8000366:	409a      	lsls	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3301      	adds	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9c1      	bls.n	80002fc <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	605a      	str	r2, [r3, #4]
  }
}
 800037e:	bf00      	nop
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000396:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2202      	movs	r2, #2
 800039c:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2204      	movs	r2, #4
 80003a2:	70da      	strb	r2, [r3, #3]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	807b      	strh	r3, [r7, #2]
 80003bc:	4613      	mov	r3, r2
 80003be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80003c0:	787b      	ldrb	r3, [r7, #1]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80003c6:	887a      	ldrh	r2, [r7, #2]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80003cc:	e002      	b.n	80003d4 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80003ce:	887a      	ldrh	r2, [r7, #2]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	615a      	str	r2, [r3, #20]
  }
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d006      	beq.n	8000400 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80003f2:	4909      	ldr	r1, [pc, #36]	; (8000418 <RCC_APB2PeriphClockCmd+0x38>)
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <RCC_APB2PeriphClockCmd+0x38>)
 80003f6:	699a      	ldr	r2, [r3, #24]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80003fe:	e006      	b.n	800040e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <RCC_APB2PeriphClockCmd+0x38>)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <RCC_APB2PeriphClockCmd+0x38>)
 8000404:	699a      	ldr	r2, [r3, #24]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	43db      	mvns	r3, r3
 800040a:	4013      	ands	r3, r2
 800040c:	618b      	str	r3, [r1, #24]
  }
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	da0b      	bge.n	8000448 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000430:	490d      	ldr	r1, [pc, #52]	; (8000468 <NVIC_SetPriority+0x4c>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 030f 	and.w	r3, r3, #15
 8000438:	3b04      	subs	r3, #4
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000446:	e009      	b.n	800045c <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000448:	4908      	ldr	r1, [pc, #32]	; (800046c <NVIC_SetPriority+0x50>)
 800044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	0112      	lsls	r2, r2, #4
 8000454:	b2d2      	uxtb	r2, r2
 8000456:	440b      	add	r3, r1
 8000458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00
 800046c:	e000e100 	.word	0xe000e100

08000470 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800047e:	d301      	bcc.n	8000484 <SysTick_Config+0x14>
 8000480:	2301      	movs	r3, #1
 8000482:	e011      	b.n	80004a8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000484:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <SysTick_Config+0x40>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800048c:	3b01      	subs	r3, #1
 800048e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000490:	210f      	movs	r1, #15
 8000492:	f04f 30ff 	mov.w	r0, #4294967295
 8000496:	f7ff ffc1 	bl	800041c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SysTick_Config+0x40>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <SysTick_Config+0x40>)
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	e000e010 	.word	0xe000e010

080004b4 <main>:
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"

void Delay(uint32_t nTime);

int main(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable peripheral Clocks
    // Enable clocks for GPIO Port C
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80004ba:	2101      	movs	r1, #1
 80004bc:	2010      	movs	r0, #16
 80004be:	f7ff ff8f 	bl	80003e0 <RCC_APB2PeriphClockCmd>

    // Configure Pins
    // Pin PC9 must be configured as an output
    GPIO_StructInit(&GPIO_InitStructure);
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff5f 	bl	8000388 <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80004ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ce:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80004d0:	2310      	movs	r3, #16
 80004d2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80004d4:	2302      	movs	r3, #2
 80004d6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4833      	ldr	r0, [pc, #204]	; (80005ac <main+0xf8>)
 80004de:	f7ff fe97 	bl	8000210 <GPIO_Init>
  /*************************************************
   *	Initialize port b of PB5 of stm 32
   *
   * ************************************************/
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); //Enable clock for GPIOB
 80004e2:	2101      	movs	r1, #1
 80004e4:	2008      	movs	r0, #8
 80004e6:	f7ff ff7b 	bl	80003e0 <RCC_APB2PeriphClockCmd>
    GPIO_StructInit(&GPIO_InitStructure);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff4b 	bl	8000388 <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 80004f2:	2320      	movs	r3, #32
 80004f4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80004f6:	2310      	movs	r3, #16
 80004f8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80004fa:	2302      	movs	r3, #2
 80004fc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	482b      	ldr	r0, [pc, #172]	; (80005b0 <main+0xfc>)
 8000504:	f7ff fe84 	bl	8000210 <GPIO_Init>

    /*************************************************
       *	Initialize port b of PA3 of stm 32
       *
     * ************************************************/
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000508:	2101      	movs	r1, #1
 800050a:	2004      	movs	r0, #4
 800050c:	f7ff ff68 	bl	80003e0 <RCC_APB2PeriphClockCmd>
        GPIO_StructInit(&GPIO_InitStructure);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff38 	bl	8000388 <GPIO_StructInit>
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000518:	2308      	movs	r3, #8
 800051a:	80bb      	strh	r3, [r7, #4]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800051c:	2310      	movs	r3, #16
 800051e:	71fb      	strb	r3, [r7, #7]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000520:	2302      	movs	r3, #2
 8000522:	71bb      	strb	r3, [r7, #6]
        GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4822      	ldr	r0, [pc, #136]	; (80005b4 <main+0x100>)
 800052a:	f7ff fe71 	bl	8000210 <GPIO_Init>

    // Configure SysTick Timer
    if (SysTick_Config(SystemCoreClock / 100000))
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <main+0x104>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	095b      	lsrs	r3, r3, #5
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <main+0x108>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	09db      	lsrs	r3, r3, #7
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff97 	bl	8000470 <SysTick_Config>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d000      	beq.n	800054a <main+0x96>
        while (1);
 8000548:	e7fe      	b.n	8000548 <main+0x94>

    while (1){
        static int ledval = 0;

        // toggle LED
        GPIO_WriteBit(GPIOC, GPIO_Pin_9, (ledval) ? Bit_SET : Bit_RESET);
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0x10c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	bf14      	ite	ne
 8000552:	2301      	movne	r3, #1
 8000554:	2300      	moveq	r3, #0
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <main+0xf8>)
 8000560:	f7ff ff26 	bl	80003b0 <GPIO_WriteBit>
        GPIO_WriteBit(GPIOB, GPIO_Pin_5, (ledval) ? Bit_SET : Bit_RESET);
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0x10c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	2120      	movs	r1, #32
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <main+0xfc>)
 8000578:	f7ff ff1a 	bl	80003b0 <GPIO_WriteBit>
        GPIO_WriteBit(GPIOA, GPIO_Pin_3, (ledval) ? Bit_SET : Bit_RESET);
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <main+0x10c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	2108      	movs	r1, #8
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <main+0x100>)
 8000590:	f7ff ff0e 	bl	80003b0 <GPIO_WriteBit>
        ledval = 1 - ledval;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <main+0x10c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1c3 0301 	rsb	r3, r3, #1
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <main+0x10c>)
 800059e:	6013      	str	r3, [r2, #0]
        Delay (3000);    // wait 250ms
 80005a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a4:	f000 f80e 	bl	80005c4 <Delay>
    }
 80005a8:	e7cf      	b.n	800054a <main+0x96>
 80005aa:	bf00      	nop
 80005ac:	40011000 	.word	0x40011000
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40010800 	.word	0x40010800
 80005b8:	20000000 	.word	0x20000000
 80005bc:	0a7c5ac5 	.word	0x0a7c5ac5
 80005c0:	20000024 	.word	0x20000024

080005c4 <Delay>:
}

// Timer code
static __IO uint32_t TimingDelay;

void Delay(uint32_t nTime){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    TimingDelay = nTime;
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <Delay+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
    while(TimingDelay != 0);
 80005d2:	bf00      	nop
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <Delay+0x24>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1fb      	bne.n	80005d4 <Delay+0x10>
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000020 	.word	0x20000020

080005ec <SysTick_Handler>:

void SysTick_Handler(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    if (TimingDelay != 0x00)
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SysTick_Handler+0x20>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d004      	beq.n	8000602 <SysTick_Handler+0x16>
        TimingDelay--;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <SysTick_Handler+0x20>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <SysTick_Handler+0x20>)
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000020 	.word	0x20000020

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000614:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000616:	e003      	b.n	8000620 <LoopCopyDataInit>

08000618 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800061a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800061c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800061e:	3104      	adds	r1, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000624:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000626:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000628:	d3f6      	bcc.n	8000618 <CopyDataInit>
	ldr	r2, =_sbss
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800062c:	e002      	b.n	8000634 <LoopFillZerobss>

0800062e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800062e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000630:	f842 3b04 	str.w	r3, [r2], #4

08000634 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000636:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000638:	d3f9      	bcc.n	800062e <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 800063a:	f000 f83b 	bl	80006b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800063e:	f000 f8e1 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff ff37 	bl	80004b4 <main>
	bx	lr
 8000646:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000648:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800064c:	08000870 	.word	0x08000870
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000650:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000654:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000658:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800065c:	20000028 	.word	0x20000028

08000660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_IRQHandler>
	...

08000664 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000674:	e7fe      	b.n	8000674 <HardFault_Handler+0x4>
 8000676:	bf00      	nop

08000678 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>
 800067e:	bf00      	nop

08000680 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000684:	e7fe      	b.n	8000684 <BusFault_Handler+0x4>
 8000686:	bf00      	nop

08000688 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>
 800068e:	bf00      	nop

08000690 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <SystemInit+0x64>)
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <SystemInit+0x64>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80006c4:	4914      	ldr	r1, [pc, #80]	; (8000718 <SystemInit+0x64>)
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <SystemInit+0x64>)
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <SystemInit+0x68>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <SystemInit+0x64>)
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <SystemInit+0x64>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <SystemInit+0x64>)
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <SystemInit+0x64>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SystemInit+0x64>)
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <SystemInit+0x64>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <SystemInit+0x64>)
 80006fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006fe:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SystemInit+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000706:	f000 f80d 	bl	8000724 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <SystemInit+0x6c>)
 800070c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000710:	609a      	str	r2, [r3, #8]
#endif 
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	f8ff0000 	.word	0xf8ff0000
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000728:	f000 f802 	bl	8000730 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800073e:	4a30      	ldr	r2, [pc, #192]	; (8000800 <SetSysClockTo24+0xd0>)
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <SetSysClockTo24+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <SetSysClockTo24+0xd0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d103      	bne.n	8000768 <SetSysClockTo24+0x38>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000766:	d1f0      	bne.n	800074a <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SetSysClockTo24+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000774:	2301      	movs	r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	e001      	b.n	800077e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d137      	bne.n	80007f4 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <SetSysClockTo24+0xd0>)
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <SetSysClockTo24+0xd0>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <SetSysClockTo24+0xd0>)
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <SetSysClockTo24+0xd0>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <SetSysClockTo24+0xd0>)
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <SetSysClockTo24+0xd0>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800079c:	4a18      	ldr	r2, [pc, #96]	; (8000800 <SetSysClockTo24+0xd0>)
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <SetSysClockTo24+0xd0>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80007a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <SetSysClockTo24+0xd0>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <SetSysClockTo24+0xd0>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80007b2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <SetSysClockTo24+0xd0>)
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <SetSysClockTo24+0xd0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007be:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007c0:	bf00      	nop
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <SetSysClockTo24+0xd0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <SetSysClockTo24+0xd0>)
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <SetSysClockTo24+0xd0>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f023 0303 	bic.w	r3, r3, #3
 80007d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <SetSysClockTo24+0xd0>)
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <SetSysClockTo24+0xd0>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007e6:	bf00      	nop
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SetSysClockTo24+0xd0>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 030c 	and.w	r3, r3, #12
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d1f9      	bne.n	80007e8 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <__libc_init_array>:
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <__libc_init_array+0x3c>)
 8000806:	b570      	push	{r4, r5, r6, lr}
 8000808:	461e      	mov	r6, r3
 800080a:	4c0e      	ldr	r4, [pc, #56]	; (8000844 <__libc_init_array+0x40>)
 800080c:	2500      	movs	r5, #0
 800080e:	1ae4      	subs	r4, r4, r3
 8000810:	10a4      	asrs	r4, r4, #2
 8000812:	42a5      	cmp	r5, r4
 8000814:	d004      	beq.n	8000820 <__libc_init_array+0x1c>
 8000816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800081a:	4798      	blx	r3
 800081c:	3501      	adds	r5, #1
 800081e:	e7f8      	b.n	8000812 <__libc_init_array+0xe>
 8000820:	f000 f816 	bl	8000850 <_init>
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <__libc_init_array+0x44>)
 8000826:	4c09      	ldr	r4, [pc, #36]	; (800084c <__libc_init_array+0x48>)
 8000828:	461e      	mov	r6, r3
 800082a:	1ae4      	subs	r4, r4, r3
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	2500      	movs	r5, #0
 8000830:	42a5      	cmp	r5, r4
 8000832:	d004      	beq.n	800083e <__libc_init_array+0x3a>
 8000834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000838:	4798      	blx	r3
 800083a:	3501      	adds	r5, #1
 800083c:	e7f8      	b.n	8000830 <__libc_init_array+0x2c>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	08000868 	.word	0x08000868
 8000844:	08000868 	.word	0x08000868
 8000848:	08000868 	.word	0x08000868
 800084c:	0800086c 	.word	0x0800086c

08000850 <_init>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	bf00      	nop
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr

0800085c <_fini>:
 800085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085e:	bf00      	nop
 8000860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000862:	bc08      	pop	{r3}
 8000864:	469e      	mov	lr, r3
 8000866:	4770      	bx	lr
